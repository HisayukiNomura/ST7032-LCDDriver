/**  
@mainpage ST7032をコントローラーに使用した液晶用のライブラリ
 
Strawberry Linux の[I2C低電圧キャラクタ液晶モジュール(SB1602B)](https://strawberry-linux.com/catalog/items?code=27001)を、Raspberry PI Picoに接続して使用する際のライブラリです。\n
ほかの、ST7032iを液晶コントローラにしている液晶モジュールでも使用できますが、SB1602BのLCDで文字領域の上に表示できるアイコンについては動作しません。（液晶にアイコン自体が無いため）\n
Strawberry Linux のI2C低電圧キャラクタ液晶モジュール(SB1602B) と、秋月電子の[Raspberry Pi キャラクター液晶ディスプレイモジュールキット(AE-AQM0802+PCA9515)](https://akizukidenshi.com/catalog/g/g111354/)で動作を確認しました。\n
その他、ST7032をコントローラーにしたもの、例えば秋月のI2C接続小型キャラクターLCDモジュール(AQM1602XA-RN-GBW)等でも使用できる可能性があります。\n

 
@section main_sec 特徴
- ST7032iのコマンドやi2cのプロトコルが隠ぺいされており、関数の呼び出しだけでコントロールが可能です。
- SB1602Bに実装されているアイコン表示（液晶上部にあるアンテナや電話、バッテリなどのアイコン）も制御可能です。
- 実装（主に液晶とPico本体の結線）にあわせて変更が必要な個所はヘッダファイルにまとまっており変更は容易です。

@subsection main_subsec  このライブラリについて
Strawberry Linux のI2C低電圧キャラクタ液晶モジュール(SB1602B)は、3.3V～5Vという電源範囲で動作し、最近のマイコンへの接続に便利です。
一方、i2c接続で使用する際には、コマンドやデータを、正しく構成して正しい順番で送信する必要があり、そのまま使うには毎回データシートと首っ引きで調べる必要があります。\n

例えば、初期化処理などでは次のような一連のコマンドをi2cを使って送信する必要があります。

@code 
	i2c_cmd(0b00111000); // function set
	i2c_cmd(0b00111001); // 命令を拡張モード(IS=1)に設定
	i2c_cmd(0b00010100); // オシレータの設定
	i2c_cmd(0b01110000 | (contrast & 0xF)); // 液晶コントラストの下位
	i2c_cmd(0b01011100 | ((contrast >> 4) & 0x3)); // 液晶コントラストの上位２と、それ以外の設定
	i2c_cmd(0b01101100); // 電圧フォロア回路の設定
	wait_ms(300);
	i2c_cmd(0b00111000); // 命令を標準モード(IS=0)に戻す
	i2c_cmd(0b00001100); // ディスプレイをオンにする
	i2c_cmd(0b00000001); // 画面を消去する
@endcode

これら一連の処理を、このライブラリでは lcd_init() といった関数にまとめてあります。
初期化処理では、コントラストは中間程度、２行表示など「ありがちな」設定に初期化され文字が表示できる状態になるため、細かい設定について初期化完了後に変更することができます。
例えば、コントラストを変更したい場合などは次のように簡単に変更できます。


@code 
    lcd_init();
    lcd_ContrastSet(変更後のコントラスト,true , true);
@endcode

また、Raspberry PI picoのリッチなメモリ空間とCPU能力、SDKの実装を生かし、printfのようにフォーマット付きの出力も可能です。

@subsection main_porting 実装にあわせた変更
このライブラリでは、実装にあわせて一部のマクロで変更が必要です。変更箇所は、i2cLCD.hに集約されています。

変更頻度の高いと思われるマクロ \n

マクロ名  | デフォルト|説明
--------- | ---------|----
I2C_PORT  | i2c0     |使用するI2Cのハードウェアブロック番号。i2c0 か i2c1を指定する。
I2C_SDA   | 8        |SDAポートとして使用するポート番号。ピン番号ではない。例えば8の場合、GP8を意味するので１１番ピンとなる。
I2C_SCL   | 9        |SCLポートとして使用するポート番号。ピン番号ではない。例えば9の場合、GP9を意味するので１２番ピンとなる。
DEFAULT_CONTRAST|0b00101000|デフォルトのコントラスト。使用する液晶により適正値は異なる。strawberry linuxのSB1602Bにあわせてある。


変更頻度は低いが変更可能なマクロ \n
マクロ名  | デフォルト|説明
--------- | ---------|----
I2C_SPEED|100 * 1000|I2Cのボーレート(HZ)。100*1000の場合は、100KHzとなる。命令の取りこぼしがある場合などに調整する
I2C_ADDRESS|0b0111110|I2Cのスレーブi2cアドレス。ST7032の場合、常に0b0111110。異なるコントローラの場合などに変更する。
MAX_LINES|2         |接続されている液晶の最大表示行数
MAX_CHARS|16        |接続されている液晶の最大表示桁数
CMD_DELAY|30        |一般コマンドの実行後の短い待ち時間
CMD_DELAY|16        |一部のコマンドの実行後の長い待ち時間
LCD_ICONEXIST|true| 接続されいている液晶にアイコン表示機能があるか

@section kickstart 使用するまでの手順

-# VSCodeで、拡張機能からRaspberry pi Picoをインストールし、SDK環境を構築する。\n
-# プロジェクトウイザードで、i2cにチェックを入れてプロジェクトを新規作成する。\n
-# i2cLCD.cpp、i2cLCD.h、i2cLCDlocal.hの３本のファイルを、作成したプロジェクトのフォルダにコピーする。\n
-# プロジェクトの CMakeLists.txtを開き、add_executableに i2cLCD.cppを追加する。　（例：　add_executable(プロジェクト名 メインプログラム.cpp i2cLCD.cpp)　）\n
-# LCDDriver.cppを参考に、メインプログラム内でi2cと液晶ライブラリを初期化し、使用する。\n


@par 主な関数

画面に文字を表示するときに、最低限知っておく必要がある関数は次の通りです。機能については、名前から想像するか、i2clcd.cppの説明を参照してください。
それ以外の関数については、i2clcd.cppの説明を参照してください。

- void lcd_init();   			初期化処理。最初に１度必ず実行する 
- int lcd_ClearDisplay(void);	画面の消去
- lcd_ReturnHome(void);			カーソルを左上に移動
- lcd_CursorPosition(int line, int position) ;　カーソルを指定した位置に移動
- lcd_CursorDisplay(bool);		カーソルを表示/非表示にする
- lcd_string(const char *s);	文字列を画面に出力する
- lcd_printf(const char *format, ...);	フォーマット付きで文字列を画面に出力する
*/ 

  


